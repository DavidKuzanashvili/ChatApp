(()=>{var t={616:t=>{window,t.exports=function(t){var e={};function n(o){if(e[o])return e[o].exports;var r=e[o]={i:o,l:!1,exports:{}};return t[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(o,r,function(e){return t[e]}.bind(null,r));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";function o(t){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function r(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}n.r(e);var i={maxNotifications:10,animationDuration:300,position:"bottom-right",labels:{tip:"Tip",info:"Info",success:"Success",warning:"Attention",alert:"Error",async:"Loading",confirm:"Confirmation required",confirmOk:"OK",confirmCancel:"Cancel"},icons:{tip:"question-circle",info:"info-circle",success:"check-circle",warning:"exclamation-circle",alert:"exclamation-triangle",async:"cog fa-spin",confirm:"exclamation-triangle",prefix:"<i class='fa fas fa-fw fa-",suffix:"'></i>",enabled:!0},replacements:{tip:null,info:null,success:null,warning:null,alert:null,async:null,"async-block":null,modal:null,confirm:null,general:{"<script>":"","<\/script>":""}},messages:{tip:"",info:"",success:"Action has been succeeded",warning:"",alert:"Action has been failed",confirm:"This action can't be undone. Continue?",async:"Please, wait...","async-block":"Loading"},formatError:function(t){if(t.response){if(!t.response.data)return"500 API Server Error";if(t.response.data.errors)return t.response.data.errors.map((function(t){return t.detail})).join("<br>");if(t.response.statusText)return"".concat(t.response.status," ").concat(t.response.statusText,": ").concat(t.response.data)}return t.message?t.message:t},durations:{global:5e3,success:null,info:null,tip:null,warning:null,alert:null},minDurations:{async:1e3,"async-block":1e3}},s=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:i;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),Object.assign(this,this.defaultsDeep(n,e))}var e,n;return e=t,(n=[{key:"icon",value:function(t){return this.icons.enabled?"".concat(this.icons.prefix).concat(this.icons[t]).concat(this.icons.suffix):""}},{key:"label",value:function(t){return this.labels[t]}},{key:"duration",value:function(t){var e=this.durations[t];return null===e?this.durations.global:e}},{key:"toSecs",value:function(t){return"".concat(t/1e3,"s")}},{key:"applyReplacements",value:function(t,e){if(!t)return this.messages[e]||"";for(var n=0,o=["general",e];n<o.length;n++){var r=o[n];if(this.replacements[r])for(var i in this.replacements[r])t=t.replace(i,this.replacements[r][i])}return t}},{key:"override",value:function(e){return e?new t(e,this):this}},{key:"defaultsDeep",value:function(t,e){var n={};for(var r in t)e.hasOwnProperty(r)?n[r]="object"===o(t[r])&&null!==t[r]?this.defaultsDeep(t[r],e[r]):e[r]:n[r]=t[r];return n}}])&&r(e.prototype,n),t}(),c={popup:"".concat("awn","-popup"),toast:"".concat("awn","-toast"),btn:"".concat("awn","-btn"),confirm:"".concat("awn","-confirm")},a={prefix:c.toast,klass:{label:"".concat(c.toast,"-label"),content:"".concat(c.toast,"-content"),icon:"".concat(c.toast,"-icon"),progressBar:"".concat(c.toast,"-progress-bar"),progressBarPause:"".concat(c.toast,"-progress-bar-paused")},ids:{container:"".concat(c.toast,"-container")}},l={prefix:c.popup,klass:{buttons:"".concat("awn","-buttons"),button:c.btn,successBtn:"".concat(c.btn,"-success"),cancelBtn:"".concat(c.btn,"-cancel"),title:"".concat(c.popup,"-title"),body:"".concat(c.popup,"-body"),content:"".concat(c.popup,"-content"),dotAnimation:"".concat(c.popup,"-loading-dots")},ids:{wrapper:"".concat(c.popup,"-wrapper"),confirmOk:"".concat(c.confirm,"-ok"),confirmCancel:"".concat(c.confirm,"-cancel")}},u={klass:{hiding:"".concat("awn","-hiding")},lib:"awn"};function h(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}var p=function(){function t(e,n,o,r,i){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.newNode=document.createElement("div"),n&&(this.newNode.id=n),o&&(this.newNode.className=o),r&&(this.newNode.style.cssText=r),this.parent=e,this.options=i}var e,n;return e=t,(n=[{key:"beforeInsert",value:function(){}},{key:"afterInsert",value:function(){}},{key:"insert",value:function(){return this.beforeInsert(),this.el=this.parent.appendChild(this.newNode),this.afterInsert(),this}},{key:"replace",value:function(t){var e=this;if(this.getElement())return this.beforeDelete().then((function(){return e.updateType(t.type),e.parent.replaceChild(t.newNode,e.el),e.el=e.getElement(t.newNode),e.afterInsert(),e}))}},{key:"beforeDelete",value:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.el,n=0;return this.start&&(n=this.options.minDurations[this.type]+this.start-Date.now())<0&&(n=0),new Promise((function(o){setTimeout((function(){e.classList.add(u.klass.hiding),setTimeout(o,t.options.animationDuration)}),n)}))}},{key:"delete",value:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.el;return this.getElement(e)?this.beforeDelete(e).then((function(){e.remove(),t.afterDelete()})):null}},{key:"afterDelete",value:function(){}},{key:"getElement",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.el;return t?document.getElementById(t.id):null}},{key:"addEvent",value:function(t,e){this.el.addEventListener(t,e)}},{key:"toggleClass",value:function(t){this.el.classList.toggle(t)}},{key:"updateType",value:function(t){this.type=t,this.duration=this.options.duration(this.type)}}])&&h(e.prototype,n),t}();function f(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}var d=function(){function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.callback=e,this.remaining=n,this.resume()}var e,n;return e=t,(n=[{key:"pause",value:function(){this.paused=!0,window.clearTimeout(this.timerId),this.remaining-=new Date-this.start}},{key:"resume",value:function(){var t=this;this.paused=!1,this.start=new Date,window.clearTimeout(this.timerId),this.timerId=window.setTimeout((function(){window.clearTimeout(t.timerId),t.callback()}),this.remaining)}},{key:"toggle",value:function(){this.paused?this.resume():this.pause()}}])&&f(e.prototype,n),t}();function g(t){return(g="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function y(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}function v(t){return(v=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function b(t,e){return(b=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var m=function(t){function e(t,n,o,r){var i;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(i=function(t,e){return!e||"object"!==g(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}(this,v(e).call(this,r,"".concat(a.prefix,"-").concat(Math.floor(Date.now()-100*Math.random())),"".concat(a.prefix," ").concat(a.prefix,"-").concat(n),"animation-duration: ".concat(o.toSecs(o.animationDuration),";"),o))).updateType(n),i.setInnerHtml(t),i}var n,o;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&b(t,e)}(e,t),n=e,(o=[{key:"setInnerHtml",value:function(t){"alert"===this.type&&t&&(t=this.options.formatError(t)),t=this.options.applyReplacements(t,this.type),this.newNode.innerHTML='<div class="awn-toast-wrapper">'.concat(this.progressBar).concat(this.label,'<div class="').concat(a.klass.content,'">').concat(t,'</div><span class="').concat(a.klass.icon,'">').concat(this.options.icon(this.type),"</span></div>")}},{key:"beforeInsert",value:function(){var t=this;if(this.parent.childElementCount>=this.options.maxNotifications){var e=Array.from(this.parent.getElementsByClassName(a.prefix));this.delete(e.find((function(e){return!t.isDeleted(e)})))}}},{key:"afterInsert",value:function(){var t=this;if("async"==this.type)return this.start=Date.now();if(this.addEvent("click",(function(){return t.delete()})),!(this.duration<=0)){this.timer=new d((function(){return t.delete()}),this.duration);for(var e=0,n=["mouseenter","mouseleave"];e<n.length;e++){var o=n[e];this.addEvent(o,(function(){t.isDeleted()||(t.toggleClass(a.klass.progressBarPause),t.timer.toggle())}))}}}},{key:"isDeleted",value:function(){return(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.el).classList.contains(u.klass.hiding)}},{key:"progressBar",get:function(){return this.duration<=0||"async"===this.type?"":"<div class='".concat(a.klass.progressBar,"' style=\"animation-duration:").concat(this.options.toSecs(this.duration),';"></div>')}},{key:"label",get:function(){return'<b class="'.concat(a.klass.label,'">').concat(this.options.label(this.type),"</b>")}}])&&y(n.prototype,o),e}(p);function w(t){return(w="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function k(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}function S(t,e){return!e||"object"!==w(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function C(t){return(C=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function E(t,e){return(E=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var T=function(t){function e(t){var n,o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"modal",r=arguments.length>2?arguments[2]:void 0,i=arguments.length>3?arguments[3]:void 0,s=arguments.length>4?arguments[4]:void 0;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var c="animation-duration: ".concat(r.toSecs(r.animationDuration),";");return(n=S(this,C(e).call(this,document.body,l.ids.wrapper,null,c,r)))[l.ids.confirmOk]=i,n[l.ids.confirmCancel]=s,n.className="".concat(l.prefix,"-").concat(o),["confirm","async-block","modal"].includes(o)||(o="modal"),n.updateType(o),n.setInnerHtml(t),n.insert(),n}var n,o;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&E(t,e)}(e,t),n=e,(o=[{key:"setInnerHtml",value:function(t){var e=this.options.applyReplacements(t,this.type);switch(this.type){case"confirm":var n=["<button class='".concat(l.klass.button," ").concat(l.klass.successBtn,"'id='").concat(l.ids.confirmOk,"'>").concat(this.options.labels.confirmOk,"</button>")];!1!==this[l.ids.confirmCancel]&&n.push("<button class='".concat(l.klass.button," ").concat(l.klass.cancelBtn,"'id='").concat(l.ids.confirmCancel,"'>").concat(this.options.labels.confirmCancel,"</button>")),e="".concat(this.options.icon(this.type),"<div class='").concat(l.klass.title,"'>").concat(this.options.label(this.type),'</div><div class="').concat(l.klass.content,'">').concat(e,"</div><div class='").concat(l.klass.buttons," ").concat(l.klass.buttons,"-").concat(n.length,"'>").concat(n.join(""),"</div>");break;case"async-block":e="".concat(e,'<div class="').concat(l.klass.dotAnimation,'"></div>')}this.newNode.innerHTML='<div class="'.concat(l.klass.body," ").concat(this.className,'">').concat(e,"</div>")}},{key:"keyupListener",value:function(t){if("async-block"===this.type)return t.preventDefault();switch(t.code){case"Escape":t.preventDefault(),this.delete();case"Tab":if(t.preventDefault(),"confirm"!==this.type||!1===this[l.ids.confirmCancel])return!0;var e=this.okBtn;t.shiftKey?document.activeElement.id==l.ids.confirmOk&&(e=this.cancelBtn):document.activeElement.id!==l.ids.confirmCancel&&(e=this.cancelBtn),e.focus()}}},{key:"afterInsert",value:function(){var t=this;switch(this.listener=function(e){return t.keyupListener(e)},window.addEventListener("keydown",this.listener),this.type){case"async-block":this.start=Date.now();break;case"confirm":this.okBtn.focus(),this.addEvent("click",(function(e){if("BUTTON"!==e.target.nodeName)return!1;t.delete(),t[e.target.id]&&t[e.target.id]()}));break;default:document.activeElement.blur(),this.addEvent("click",(function(e){e.target.id===t.newNode.id&&t.delete()}))}}},{key:"afterDelete",value:function(){window.removeEventListener("keydown",this.listener)}},{key:"okBtn",get:function(){return document.getElementById(l.ids.confirmOk)}},{key:"cancelBtn",get:function(){return document.getElementById(l.ids.confirmCancel)}}])&&k(n.prototype,o),e}(p);function P(t){return(P="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function I(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}n.d(e,"default",(function(){return D}));var D=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.options=new s(e)}var e,n;return e=t,(n=[{key:"tip",value:function(t,e){return this._addToast(t,"tip",e).el}},{key:"info",value:function(t,e){return this._addToast(t,"info",e).el}},{key:"success",value:function(t,e){return this._addToast(t,"success",e).el}},{key:"warning",value:function(t,e){return this._addToast(t,"warning",e).el}},{key:"alert",value:function(t,e){return this._addToast(t,"alert",e).el}},{key:"async",value:function(t,e,n,o,r){var i=this._addToast(o,"async",r);return this._afterAsync(t,e,n,r,i)}},{key:"confirm",value:function(t,e,n,o){return this._addPopup(t,"confirm",o,e,n)}},{key:"asyncBlock",value:function(t,e,n,o,r){var i=this._addPopup(o,"async-block",r);return this._afterAsync(t,e,n,r,i)}},{key:"modal",value:function(t,e,n){return this._addPopup(t,e,n)}},{key:"closeToasts",value:function(){for(var t=this.container;t.firstChild;)t.removeChild(t.firstChild)}},{key:"_addPopup",value:function(t,e,n,o,r){return new T(t,e,this.options.override(n),o,r)}},{key:"_addToast",value:function(t,e,n,o){n=this.options.override(n);var r=new m(t,e,n,this.container);return o?o instanceof T?o.delete().then((function(){return r.insert()})):o.replace(r):r.insert()}},{key:"_afterAsync",value:function(t,e,n,o,r){return t.then(this._responseHandler(e,"success",o,r),this._responseHandler(n,"alert",o,r))}},{key:"_responseHandler",value:function(t,e,n,o){var r=this;return function(i){switch(P(t)){case"undefined":case"string":var s="alert"===e?t||i:t;r._addToast(s,e,n,o);break;default:o.delete().then((function(){t&&t(i)}))}}}},{key:"_createContainer",value:function(){return new p(document.body,a.ids.container,"awn-".concat(this.options.position)).insert().el}},{key:"container",get:function(){return document.getElementById(a.ids.container)||this._createContainer()}}])&&I(e.prototype,n),t}()}])}},e={};function n(o){var r=e[o];if(void 0!==r)return r.exports;var i=e[o]={exports:{}};return t[o](i,i.exports,n),i.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var o in e)n.o(e,o)&&!n.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;n.g.importScripts&&(t=n.g.location+"");var e=n.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var o=e.getElementsByTagName("script");o.length&&(t=o[o.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=t})(),(()=>{"use strict";var t,e,o=n(616),r=n.n(o),i=(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}),s=function(t){function e(e,n){var o=this,r=this.constructor.prototype;return(o=t.call(this,e)||this).statusCode=n,o.__proto__=r,o}return i(e,t),e}(Error),c=function(t){function e(e){void 0===e&&(e="A timeout occurred.");var n=this,o=this.constructor.prototype;return(n=t.call(this,e)||this).__proto__=o,n}return i(e,t),e}(Error),a=function(t){function e(e){void 0===e&&(e="An abort occurred.");var n=this,o=this.constructor.prototype;return(n=t.call(this,e)||this).__proto__=o,n}return i(e,t),e}(Error),l=Object.assign||function(t){for(var e,n=1,o=arguments.length;n<o;n++)for(var r in e=arguments[n])Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t},u=function(t,e,n){this.statusCode=t,this.statusText=e,this.content=n},h=function(){function t(){}return t.prototype.get=function(t,e){return this.send(l({},e,{method:"GET",url:t}))},t.prototype.post=function(t,e){return this.send(l({},e,{method:"POST",url:t}))},t.prototype.delete=function(t,e){return this.send(l({},e,{method:"DELETE",url:t}))},t.prototype.getCookieString=function(t){return""},t}();!function(t){t[t.Trace=0]="Trace",t[t.Debug=1]="Debug",t[t.Information=2]="Information",t[t.Warning=3]="Warning",t[t.Error=4]="Error",t[t.Critical=5]="Critical",t[t.None=6]="None"}(e||(e={}));var p=function(){function t(){}return t.prototype.log=function(t,e){},t.instance=new t,t}(),f=Object.assign||function(t){for(var e,n=1,o=arguments.length;n<o;n++)for(var r in e=arguments[n])Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t},d=function(){function t(){}return t.isRequired=function(t,e){if(null==t)throw new Error("The '"+e+"' argument is required.")},t.isNotEmpty=function(t,e){if(!t||t.match(/^\s*$/))throw new Error("The '"+e+"' argument should not be empty.")},t.isIn=function(t,e,n){if(!(t in e))throw new Error("Unknown "+n+" value: "+t+".")},t}(),g=function(){function t(){}return Object.defineProperty(t,"isBrowser",{get:function(){return"object"==typeof window},enumerable:!0,configurable:!0}),Object.defineProperty(t,"isWebWorker",{get:function(){return"object"==typeof self&&"importScripts"in self},enumerable:!0,configurable:!0}),Object.defineProperty(t,"isNode",{get:function(){return!this.isBrowser&&!this.isWebWorker},enumerable:!0,configurable:!0}),t}();function y(t,e){var n="";return v(t)?(n="Binary data of length "+t.byteLength,e&&(n+=". Content: '"+function(t){var e=new Uint8Array(t),n="";return e.forEach((function(t){n+="0x"+(t<16?"0":"")+t.toString(16)+" "})),n.substr(0,n.length-1)}(t)+"'")):"string"==typeof t&&(n="String data of length "+t.length,e&&(n+=". Content: '"+t+"'")),n}function v(t){return t&&"undefined"!=typeof ArrayBuffer&&(t instanceof ArrayBuffer||t.constructor&&"ArrayBuffer"===t.constructor.name)}function b(t,n,o,r,i,s,c,a,l){return u=this,h=void 0,d=function(){var u,h,p,d,g,b,m,w;return function(t,e){var n,o,r,i,s={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(i){return function(c){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,o=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((r=(r=s.trys).length>0&&r[r.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){s.label=i[1];break}if(6===i[0]&&s.label<r[1]){s.label=r[1],r=i;break}if(r&&s.label<r[2]){s.label=r[2],s.ops.push(i);break}r[2]&&s.ops.pop(),s.trys.pop();continue}i=e.call(t,s)}catch(t){i=[6,t],o=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}}(this,(function(S){switch(S.label){case 0:return h={},i?[4,i()]:[3,2];case 1:(p=S.sent())&&((u={}).Authorization="Bearer "+p,h=u),S.label=2;case 2:return d=k(),g=d[0],b=d[1],h[g]=b,t.log(e.Trace,"("+n+" transport) sending data. "+y(s,c)+"."),m=v(s)?"arraybuffer":"text",[4,o.post(r,{content:s,headers:f({},h,l),responseType:m,withCredentials:a})];case 3:return w=S.sent(),t.log(e.Trace,"("+n+" transport) request complete. Response status: "+w.statusCode+"."),[2]}}))},new((p=void 0)||(p=Promise))((function(t,e){function n(t){try{r(d.next(t))}catch(t){e(t)}}function o(t){try{r(d.throw(t))}catch(t){e(t)}}function r(e){e.done?t(e.value):new p((function(t){t(e.value)})).then(n,o)}r((d=d.apply(u,h||[])).next())}));var u,h,p,d}var m=function(){function t(t,e){this.subject=t,this.observer=e}return t.prototype.dispose=function(){var t=this.subject.observers.indexOf(this.observer);t>-1&&this.subject.observers.splice(t,1),0===this.subject.observers.length&&this.subject.cancelCallback&&this.subject.cancelCallback().catch((function(t){}))},t}(),w=function(){function t(t){this.minimumLogLevel=t,this.outputConsole=console}return t.prototype.log=function(t,n){if(t>=this.minimumLogLevel)switch(t){case e.Critical:case e.Error:this.outputConsole.error("["+(new Date).toISOString()+"] "+e[t]+": "+n);break;case e.Warning:this.outputConsole.warn("["+(new Date).toISOString()+"] "+e[t]+": "+n);break;case e.Information:this.outputConsole.info("["+(new Date).toISOString()+"] "+e[t]+": "+n);break;default:this.outputConsole.log("["+(new Date).toISOString()+"] "+e[t]+": "+n)}},t}();function k(){var t,e,n,o,r,i,s="X-SignalR-User-Agent";return g.isNode&&(s="User-Agent"),[s,(t="5.0.6",e=S(),n=g.isNode?"NodeJS":"Browser",o=C(),r="Microsoft SignalR/",i=t.split("."),r+=i[0]+"."+i[1],r+=" ("+t+"; ",r+=e&&""!==e?e+"; ":"Unknown OS; ",r+=""+n,r+=o?"; "+o:"; Unknown Runtime Version",r+=")")]}function S(){if(!g.isNode)return"";switch(process.platform){case"win32":return"Windows NT";case"darwin":return"macOS";case"linux":return"Linux";default:return process.platform}}function C(){if(g.isNode)return process.versions.node}var E,T=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),P=Object.assign||function(t){for(var e,n=1,o=arguments.length;n<o;n++)for(var r in e=arguments[n])Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t},I=function(t){function n(e){var n=t.call(this)||this;if(n.logger=e,"undefined"==typeof fetch){var o=require;n.jar=new(o("tough-cookie").CookieJar),n.fetchType=o("node-fetch"),n.fetchType=o("fetch-cookie")(n.fetchType,n.jar),n.abortControllerType=o("abort-controller")}else n.fetchType=fetch.bind(self),n.abortControllerType=AbortController;return n}return T(n,t),n.prototype.send=function(t){return n=this,o=void 0,i=function(){var n,o,r,i,l,h,p,f=this;return function(t,e){var n,o,r,i,s={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(i){return function(c){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,o=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((r=(r=s.trys).length>0&&r[r.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){s.label=i[1];break}if(6===i[0]&&s.label<r[1]){s.label=r[1],r=i;break}if(r&&s.label<r[2]){s.label=r[2],s.ops.push(i);break}r[2]&&s.ops.pop(),s.trys.pop();continue}i=e.call(t,s)}catch(t){i=[6,t],o=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}}(this,(function(d){switch(d.label){case 0:if(t.abortSignal&&t.abortSignal.aborted)throw new a;if(!t.method)throw new Error("No method defined.");if(!t.url)throw new Error("No url defined.");n=new this.abortControllerType,t.abortSignal&&(t.abortSignal.onabort=function(){n.abort(),o=new a}),r=null,t.timeout&&(i=t.timeout,r=setTimeout((function(){n.abort(),f.logger.log(e.Warning,"Timeout from HTTP request."),o=new c}),i)),d.label=1;case 1:return d.trys.push([1,3,4,5]),[4,this.fetchType(t.url,{body:t.content,cache:"no-cache",credentials:!0===t.withCredentials?"include":"same-origin",headers:P({"Content-Type":"text/plain;charset=UTF-8","X-Requested-With":"XMLHttpRequest"},t.headers),method:t.method,mode:"cors",redirect:"manual",signal:n.signal})];case 2:return l=d.sent(),[3,5];case 3:if(h=d.sent(),o)throw o;throw this.logger.log(e.Warning,"Error from HTTP request. "+h+"."),h;case 4:return r&&clearTimeout(r),t.abortSignal&&(t.abortSignal.onabort=null),[7];case 5:if(!l.ok)throw new s(l.statusText,l.status);return[4,function(t,e){var n;switch(e){case"arraybuffer":n=t.arrayBuffer();break;case"text":n=t.text();break;case"blob":case"document":case"json":throw new Error(e+" is not supported.");default:n=t.text()}return n}(l,t.responseType)];case 6:return p=d.sent(),[2,new u(l.status,l.statusText,p)]}}))},new((r=void 0)||(r=Promise))((function(t,e){function s(t){try{a(i.next(t))}catch(t){e(t)}}function c(t){try{a(i.throw(t))}catch(t){e(t)}}function a(e){e.done?t(e.value):new r((function(t){t(e.value)})).then(s,c)}a((i=i.apply(n,o||[])).next())}));var n,o,r,i},n.prototype.getCookieString=function(t){var e="";return g.isNode&&this.jar&&this.jar.getCookies(t,(function(t,n){return e=n.join("; ")})),e},n}(h),D=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),O=function(t){function n(e){var n=t.call(this)||this;return n.logger=e,n}return D(n,t),n.prototype.send=function(t){var n=this;return t.abortSignal&&t.abortSignal.aborted?Promise.reject(new a):t.method?t.url?new Promise((function(o,r){var i=new XMLHttpRequest;i.open(t.method,t.url,!0),i.withCredentials=void 0===t.withCredentials||t.withCredentials,i.setRequestHeader("X-Requested-With","XMLHttpRequest"),i.setRequestHeader("Content-Type","text/plain;charset=UTF-8");var l=t.headers;l&&Object.keys(l).forEach((function(t){i.setRequestHeader(t,l[t])})),t.responseType&&(i.responseType=t.responseType),t.abortSignal&&(t.abortSignal.onabort=function(){i.abort(),r(new a)}),t.timeout&&(i.timeout=t.timeout),i.onload=function(){t.abortSignal&&(t.abortSignal.onabort=null),i.status>=200&&i.status<300?o(new u(i.status,i.statusText,i.response||i.responseText)):r(new s(i.statusText,i.status))},i.onerror=function(){n.logger.log(e.Warning,"Error from HTTP request. "+i.status+": "+i.statusText+"."),r(new s(i.statusText,i.status))},i.ontimeout=function(){n.logger.log(e.Warning,"Timeout from HTTP request."),r(new c)},i.send(t.content||"")})):Promise.reject(new Error("No url defined.")):Promise.reject(new Error("No method defined."))},n}(h),x=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),j=function(t){function e(e){var n=t.call(this)||this;if("undefined"!=typeof fetch||g.isNode)n.httpClient=new I(e);else{if("undefined"==typeof XMLHttpRequest)throw new Error("No usable HttpClient found.");n.httpClient=new O(e)}return n}return x(e,t),e.prototype.send=function(t){return t.abortSignal&&t.abortSignal.aborted?Promise.reject(new a):t.method?t.url?this.httpClient.send(t):Promise.reject(new Error("No url defined.")):Promise.reject(new Error("No method defined."))},e.prototype.getCookieString=function(t){return this.httpClient.getCookieString(t)},e}(h),R=function(){function t(){}return t.write=function(e){return""+e+t.RecordSeparator},t.parse=function(e){if(e[e.length-1]!==t.RecordSeparator)throw new Error("Message is incomplete.");var n=e.split(t.RecordSeparator);return n.pop(),n},t.RecordSeparatorCode=30,t.RecordSeparator=String.fromCharCode(t.RecordSeparatorCode),t}(),_=function(){function t(){}return t.prototype.writeHandshakeRequest=function(t){return R.write(JSON.stringify(t))},t.prototype.parseHandshakeResponse=function(t){var e,n;if(v(t)||"undefined"!=typeof Buffer&&t instanceof Buffer){var o=new Uint8Array(t);if(-1===(i=o.indexOf(R.RecordSeparatorCode)))throw new Error("Message is incomplete.");var r=i+1;e=String.fromCharCode.apply(null,o.slice(0,r)),n=o.byteLength>r?o.slice(r).buffer:null}else{var i,s=t;if(-1===(i=s.indexOf(R.RecordSeparator)))throw new Error("Message is incomplete.");r=i+1,e=s.substring(0,r),n=s.length>r?s.substring(r):null}var c=R.parse(e),a=JSON.parse(c[0]);if(a.type)throw new Error("Expected a handshake response from the server.");return[n,a]},t}();!function(t){t[t.Invocation=1]="Invocation",t[t.StreamItem=2]="StreamItem",t[t.Completion=3]="Completion",t[t.StreamInvocation=4]="StreamInvocation",t[t.CancelInvocation=5]="CancelInvocation",t[t.Ping=6]="Ping",t[t.Close=7]="Close"}(E||(E={}));var H,N=function(){function t(){this.observers=[]}return t.prototype.next=function(t){for(var e=0,n=this.observers;e<n.length;e++)n[e].next(t)},t.prototype.error=function(t){for(var e=0,n=this.observers;e<n.length;e++){var o=n[e];o.error&&o.error(t)}},t.prototype.complete=function(){for(var t=0,e=this.observers;t<e.length;t++){var n=e[t];n.complete&&n.complete()}},t.prototype.subscribe=function(t){return this.observers.push(t),new m(this,t)},t}(),A=function(t,e,n,o){return new(n||(n=Promise))((function(r,i){function s(t){try{a(o.next(t))}catch(t){i(t)}}function c(t){try{a(o.throw(t))}catch(t){i(t)}}function a(t){t.done?r(t.value):new n((function(e){e(t.value)})).then(s,c)}a((o=o.apply(t,e||[])).next())}))},M=function(t,e){var n,o,r,i,s={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(i){return function(c){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,o=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((r=(r=s.trys).length>0&&r[r.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){s.label=i[1];break}if(6===i[0]&&s.label<r[1]){s.label=r[1],r=i;break}if(r&&s.label<r[2]){s.label=r[2],s.ops.push(i);break}r[2]&&s.ops.pop(),s.trys.pop();continue}i=e.call(t,s)}catch(t){i=[6,t],o=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}};!function(t){t.Disconnected="Disconnected",t.Connecting="Connecting",t.Connected="Connected",t.Disconnecting="Disconnecting",t.Reconnecting="Reconnecting"}(H||(H={}));var L,B,W=function(){function t(t,e,n,o){var r=this;this.nextKeepAlive=0,d.isRequired(t,"connection"),d.isRequired(e,"logger"),d.isRequired(n,"protocol"),this.serverTimeoutInMilliseconds=3e4,this.keepAliveIntervalInMilliseconds=15e3,this.logger=e,this.protocol=n,this.connection=t,this.reconnectPolicy=o,this.handshakeProtocol=new _,this.connection.onreceive=function(t){return r.processIncomingData(t)},this.connection.onclose=function(t){return r.connectionClosed(t)},this.callbacks={},this.methods={},this.closedCallbacks=[],this.reconnectingCallbacks=[],this.reconnectedCallbacks=[],this.invocationId=0,this.receivedHandshakeResponse=!1,this.connectionState=H.Disconnected,this.connectionStarted=!1,this.cachedPingMessage=this.protocol.writeMessage({type:E.Ping})}return t.create=function(e,n,o,r){return new t(e,n,o,r)},Object.defineProperty(t.prototype,"state",{get:function(){return this.connectionState},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"connectionId",{get:function(){return this.connection&&this.connection.connectionId||null},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"baseUrl",{get:function(){return this.connection.baseUrl||""},set:function(t){if(this.connectionState!==H.Disconnected&&this.connectionState!==H.Reconnecting)throw new Error("The HubConnection must be in the Disconnected or Reconnecting state to change the url.");if(!t)throw new Error("The HubConnection url must be a valid url.");this.connection.baseUrl=t},enumerable:!0,configurable:!0}),t.prototype.start=function(){return this.startPromise=this.startWithStateTransitions(),this.startPromise},t.prototype.startWithStateTransitions=function(){return A(this,void 0,void 0,(function(){var t;return M(this,(function(n){switch(n.label){case 0:if(this.connectionState!==H.Disconnected)return[2,Promise.reject(new Error("Cannot start a HubConnection that is not in the 'Disconnected' state."))];this.connectionState=H.Connecting,this.logger.log(e.Debug,"Starting HubConnection."),n.label=1;case 1:return n.trys.push([1,3,,4]),[4,this.startInternal()];case 2:return n.sent(),this.connectionState=H.Connected,this.connectionStarted=!0,this.logger.log(e.Debug,"HubConnection connected successfully."),[3,4];case 3:return t=n.sent(),this.connectionState=H.Disconnected,this.logger.log(e.Debug,"HubConnection failed to start successfully because of error '"+t+"'."),[2,Promise.reject(t)];case 4:return[2]}}))}))},t.prototype.startInternal=function(){return A(this,void 0,void 0,(function(){var t,n,o,r=this;return M(this,(function(i){switch(i.label){case 0:return this.stopDuringStartError=void 0,this.receivedHandshakeResponse=!1,t=new Promise((function(t,e){r.handshakeResolver=t,r.handshakeRejecter=e})),[4,this.connection.start(this.protocol.transferFormat)];case 1:i.sent(),i.label=2;case 2:return i.trys.push([2,5,,7]),n={protocol:this.protocol.name,version:this.protocol.version},this.logger.log(e.Debug,"Sending handshake request."),[4,this.sendMessage(this.handshakeProtocol.writeHandshakeRequest(n))];case 3:return i.sent(),this.logger.log(e.Information,"Using HubProtocol '"+this.protocol.name+"'."),this.cleanupTimeout(),this.resetTimeoutPeriod(),this.resetKeepAliveInterval(),[4,t];case 4:if(i.sent(),this.stopDuringStartError)throw this.stopDuringStartError;return[3,7];case 5:return o=i.sent(),this.logger.log(e.Debug,"Hub handshake failed with error '"+o+"' during start(). Stopping HubConnection."),this.cleanupTimeout(),this.cleanupPingTimer(),[4,this.connection.stop(o)];case 6:throw i.sent(),o;case 7:return[2]}}))}))},t.prototype.stop=function(){return A(this,void 0,void 0,(function(){var t;return M(this,(function(e){switch(e.label){case 0:return t=this.startPromise,this.stopPromise=this.stopInternal(),[4,this.stopPromise];case 1:e.sent(),e.label=2;case 2:return e.trys.push([2,4,,5]),[4,t];case 3:case 4:return e.sent(),[3,5];case 5:return[2]}}))}))},t.prototype.stopInternal=function(t){return this.connectionState===H.Disconnected?(this.logger.log(e.Debug,"Call to HubConnection.stop("+t+") ignored because it is already in the disconnected state."),Promise.resolve()):this.connectionState===H.Disconnecting?(this.logger.log(e.Debug,"Call to HttpConnection.stop("+t+") ignored because the connection is already in the disconnecting state."),this.stopPromise):(this.connectionState=H.Disconnecting,this.logger.log(e.Debug,"Stopping HubConnection."),this.reconnectDelayHandle?(this.logger.log(e.Debug,"Connection stopped during reconnect delay. Done reconnecting."),clearTimeout(this.reconnectDelayHandle),this.reconnectDelayHandle=void 0,this.completeClose(),Promise.resolve()):(this.cleanupTimeout(),this.cleanupPingTimer(),this.stopDuringStartError=t||new Error("The connection was stopped before the hub handshake could complete."),this.connection.stop(t)))},t.prototype.stream=function(t){for(var e=this,n=[],o=1;o<arguments.length;o++)n[o-1]=arguments[o];var r,i=this.replaceStreamingParams(n),s=i[0],c=i[1],a=this.createStreamInvocation(t,n,c),l=new N;return l.cancelCallback=function(){var t=e.createCancelInvocation(a.invocationId);return delete e.callbacks[a.invocationId],r.then((function(){return e.sendWithProtocol(t)}))},this.callbacks[a.invocationId]=function(t,e){e?l.error(e):t&&(t.type===E.Completion?t.error?l.error(new Error(t.error)):l.complete():l.next(t.item))},r=this.sendWithProtocol(a).catch((function(t){l.error(t),delete e.callbacks[a.invocationId]})),this.launchStreams(s,r),l},t.prototype.sendMessage=function(t){return this.resetKeepAliveInterval(),this.connection.send(t)},t.prototype.sendWithProtocol=function(t){return this.sendMessage(this.protocol.writeMessage(t))},t.prototype.send=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];var o=this.replaceStreamingParams(e),r=o[0],i=o[1],s=this.sendWithProtocol(this.createInvocation(t,e,!0,i));return this.launchStreams(r,s),s},t.prototype.invoke=function(t){for(var e=this,n=[],o=1;o<arguments.length;o++)n[o-1]=arguments[o];var r=this.replaceStreamingParams(n),i=r[0],s=r[1],c=this.createInvocation(t,n,!1,s),a=new Promise((function(t,n){e.callbacks[c.invocationId]=function(e,o){o?n(o):e&&(e.type===E.Completion?e.error?n(new Error(e.error)):t(e.result):n(new Error("Unexpected message type: "+e.type)))};var o=e.sendWithProtocol(c).catch((function(t){n(t),delete e.callbacks[c.invocationId]}));e.launchStreams(i,o)}));return a},t.prototype.on=function(t,e){t&&e&&(t=t.toLowerCase(),this.methods[t]||(this.methods[t]=[]),-1===this.methods[t].indexOf(e)&&this.methods[t].push(e))},t.prototype.off=function(t,e){if(t){t=t.toLowerCase();var n=this.methods[t];if(n)if(e){var o=n.indexOf(e);-1!==o&&(n.splice(o,1),0===n.length&&delete this.methods[t])}else delete this.methods[t]}},t.prototype.onclose=function(t){t&&this.closedCallbacks.push(t)},t.prototype.onreconnecting=function(t){t&&this.reconnectingCallbacks.push(t)},t.prototype.onreconnected=function(t){t&&this.reconnectedCallbacks.push(t)},t.prototype.processIncomingData=function(t){if(this.cleanupTimeout(),this.receivedHandshakeResponse||(t=this.processHandshakeResponse(t),this.receivedHandshakeResponse=!0),t)for(var n=0,o=this.protocol.parseMessages(t,this.logger);n<o.length;n++){var r=o[n];switch(r.type){case E.Invocation:this.invokeClientMethod(r);break;case E.StreamItem:case E.Completion:var i=this.callbacks[r.invocationId];i&&(r.type===E.Completion&&delete this.callbacks[r.invocationId],i(r));break;case E.Ping:break;case E.Close:this.logger.log(e.Information,"Close message received from server.");var s=r.error?new Error("Server returned an error on close: "+r.error):void 0;!0===r.allowReconnect?this.connection.stop(s):this.stopPromise=this.stopInternal(s);break;default:this.logger.log(e.Warning,"Invalid message type: "+r.type+".")}}this.resetTimeoutPeriod()},t.prototype.processHandshakeResponse=function(t){var n,o,r;try{r=(n=this.handshakeProtocol.parseHandshakeResponse(t))[0],o=n[1]}catch(t){var i="Error parsing handshake response: "+t;this.logger.log(e.Error,i);var s=new Error(i);throw this.handshakeRejecter(s),s}if(o.error)throw i="Server returned handshake error: "+o.error,this.logger.log(e.Error,i),s=new Error(i),this.handshakeRejecter(s),s;return this.logger.log(e.Debug,"Server handshake complete."),this.handshakeResolver(),r},t.prototype.resetKeepAliveInterval=function(){this.connection.features.inherentKeepAlive||(this.nextKeepAlive=(new Date).getTime()+this.keepAliveIntervalInMilliseconds,this.cleanupPingTimer())},t.prototype.resetTimeoutPeriod=function(){var t=this;if(!(this.connection.features&&this.connection.features.inherentKeepAlive||(this.timeoutHandle=setTimeout((function(){return t.serverTimeout()}),this.serverTimeoutInMilliseconds),void 0!==this.pingServerHandle))){var e=this.nextKeepAlive-(new Date).getTime();e<0&&(e=0),this.pingServerHandle=setTimeout((function(){return A(t,void 0,void 0,(function(){return M(this,(function(t){switch(t.label){case 0:if(this.connectionState!==H.Connected)return[3,4];t.label=1;case 1:return t.trys.push([1,3,,4]),[4,this.sendMessage(this.cachedPingMessage)];case 2:return t.sent(),[3,4];case 3:return t.sent(),this.cleanupPingTimer(),[3,4];case 4:return[2]}}))}))}),e)}},t.prototype.serverTimeout=function(){this.connection.stop(new Error("Server timeout elapsed without receiving a message from the server."))},t.prototype.invokeClientMethod=function(t){var n=this,o=this.methods[t.target.toLowerCase()];if(o){try{o.forEach((function(e){return e.apply(n,t.arguments)}))}catch(n){this.logger.log(e.Error,"A callback for the method "+t.target.toLowerCase()+" threw error '"+n+"'.")}if(t.invocationId){var r="Server requested a response, which is not supported in this version of the client.";this.logger.log(e.Error,r),this.stopPromise=this.stopInternal(new Error(r))}}else this.logger.log(e.Warning,"No client method with the name '"+t.target+"' found.")},t.prototype.connectionClosed=function(t){this.logger.log(e.Debug,"HubConnection.connectionClosed("+t+") called while in state "+this.connectionState+"."),this.stopDuringStartError=this.stopDuringStartError||t||new Error("The underlying connection was closed before the hub handshake could complete."),this.handshakeResolver&&this.handshakeResolver(),this.cancelCallbacksWithError(t||new Error("Invocation canceled due to the underlying connection being closed.")),this.cleanupTimeout(),this.cleanupPingTimer(),this.connectionState===H.Disconnecting?this.completeClose(t):this.connectionState===H.Connected&&this.reconnectPolicy?this.reconnect(t):this.connectionState===H.Connected&&this.completeClose(t)},t.prototype.completeClose=function(t){var n=this;if(this.connectionStarted){this.connectionState=H.Disconnected,this.connectionStarted=!1;try{this.closedCallbacks.forEach((function(e){return e.apply(n,[t])}))}catch(n){this.logger.log(e.Error,"An onclose callback called with error '"+t+"' threw error '"+n+"'.")}}},t.prototype.reconnect=function(t){return A(this,void 0,void 0,(function(){var n,o,r,i,s,c=this;return M(this,(function(a){switch(a.label){case 0:if(n=Date.now(),o=0,r=void 0!==t?t:new Error("Attempting to reconnect due to a unknown error."),null===(i=this.getNextRetryDelay(o++,0,r)))return this.logger.log(e.Debug,"Connection not reconnecting because the IRetryPolicy returned null on the first reconnect attempt."),this.completeClose(t),[2];if(this.connectionState=H.Reconnecting,t?this.logger.log(e.Information,"Connection reconnecting because of error '"+t+"'."):this.logger.log(e.Information,"Connection reconnecting."),this.onreconnecting){try{this.reconnectingCallbacks.forEach((function(e){return e.apply(c,[t])}))}catch(n){this.logger.log(e.Error,"An onreconnecting callback called with error '"+t+"' threw error '"+n+"'.")}if(this.connectionState!==H.Reconnecting)return this.logger.log(e.Debug,"Connection left the reconnecting state in onreconnecting callback. Done reconnecting."),[2]}a.label=1;case 1:return null===i?[3,7]:(this.logger.log(e.Information,"Reconnect attempt number "+o+" will start in "+i+" ms."),[4,new Promise((function(t){c.reconnectDelayHandle=setTimeout(t,i)}))]);case 2:if(a.sent(),this.reconnectDelayHandle=void 0,this.connectionState!==H.Reconnecting)return this.logger.log(e.Debug,"Connection left the reconnecting state during reconnect delay. Done reconnecting."),[2];a.label=3;case 3:return a.trys.push([3,5,,6]),[4,this.startInternal()];case 4:if(a.sent(),this.connectionState=H.Connected,this.logger.log(e.Information,"HubConnection reconnected successfully."),this.onreconnected)try{this.reconnectedCallbacks.forEach((function(t){return t.apply(c,[c.connection.connectionId])}))}catch(t){this.logger.log(e.Error,"An onreconnected callback called with connectionId '"+this.connection.connectionId+"; threw error '"+t+"'.")}return[2];case 5:return s=a.sent(),this.logger.log(e.Information,"Reconnect attempt failed because of error '"+s+"'."),this.connectionState!==H.Reconnecting?(this.logger.log(e.Debug,"Connection moved to the '"+this.connectionState+"' from the reconnecting state during reconnect attempt. Done reconnecting."),this.connectionState===H.Disconnecting&&this.completeClose(),[2]):(r=s instanceof Error?s:new Error(s.toString()),i=this.getNextRetryDelay(o++,Date.now()-n,r),[3,6]);case 6:return[3,1];case 7:return this.logger.log(e.Information,"Reconnect retries have been exhausted after "+(Date.now()-n)+" ms and "+o+" failed attempts. Connection disconnecting."),this.completeClose(),[2]}}))}))},t.prototype.getNextRetryDelay=function(t,n,o){try{return this.reconnectPolicy.nextRetryDelayInMilliseconds({elapsedMilliseconds:n,previousRetryCount:t,retryReason:o})}catch(o){return this.logger.log(e.Error,"IRetryPolicy.nextRetryDelayInMilliseconds("+t+", "+n+") threw error '"+o+"'."),null}},t.prototype.cancelCallbacksWithError=function(t){var e=this.callbacks;this.callbacks={},Object.keys(e).forEach((function(n){(0,e[n])(null,t)}))},t.prototype.cleanupPingTimer=function(){this.pingServerHandle&&(clearTimeout(this.pingServerHandle),this.pingServerHandle=void 0)},t.prototype.cleanupTimeout=function(){this.timeoutHandle&&clearTimeout(this.timeoutHandle)},t.prototype.createInvocation=function(t,e,n,o){if(n)return 0!==o.length?{arguments:e,streamIds:o,target:t,type:E.Invocation}:{arguments:e,target:t,type:E.Invocation};var r=this.invocationId;return this.invocationId++,0!==o.length?{arguments:e,invocationId:r.toString(),streamIds:o,target:t,type:E.Invocation}:{arguments:e,invocationId:r.toString(),target:t,type:E.Invocation}},t.prototype.launchStreams=function(t,e){var n=this;if(0!==t.length){e||(e=Promise.resolve());var o=function(o){t[o].subscribe({complete:function(){e=e.then((function(){return n.sendWithProtocol(n.createCompletionMessage(o))}))},error:function(t){var r;r=t instanceof Error?t.message:t&&t.toString?t.toString():"Unknown error",e=e.then((function(){return n.sendWithProtocol(n.createCompletionMessage(o,r))}))},next:function(t){e=e.then((function(){return n.sendWithProtocol(n.createStreamItemMessage(o,t))}))}})};for(var r in t)o(r)}},t.prototype.replaceStreamingParams=function(t){for(var e=[],n=[],o=0;o<t.length;o++){var r=t[o];if(this.isObservable(r)){var i=this.invocationId;this.invocationId++,e[i]=r,n.push(i.toString()),t.splice(o,1)}}return[e,n]},t.prototype.isObservable=function(t){return t&&t.subscribe&&"function"==typeof t.subscribe},t.prototype.createStreamInvocation=function(t,e,n){var o=this.invocationId;return this.invocationId++,0!==n.length?{arguments:e,invocationId:o.toString(),streamIds:n,target:t,type:E.StreamInvocation}:{arguments:e,invocationId:o.toString(),target:t,type:E.StreamInvocation}},t.prototype.createCancelInvocation=function(t){return{invocationId:t,type:E.CancelInvocation}},t.prototype.createStreamItemMessage=function(t,e){return{invocationId:t,item:e,type:E.StreamItem}},t.prototype.createCompletionMessage=function(t,e,n){return e?{error:e,invocationId:t,type:E.Completion}:{invocationId:t,result:n,type:E.Completion}},t}(),q=[0,2e3,1e4,3e4,null],U=function(){function t(t){this.retryDelays=void 0!==t?t.concat([null]):q}return t.prototype.nextRetryDelayInMilliseconds=function(t){return this.retryDelays[t.previousRetryCount]},t}();!function(t){t[t.None=0]="None",t[t.WebSockets=1]="WebSockets",t[t.ServerSentEvents=2]="ServerSentEvents",t[t.LongPolling=4]="LongPolling"}(L||(L={})),function(t){t[t.Text=1]="Text",t[t.Binary=2]="Binary"}(B||(B={}));var F=function(){function t(){this.isAborted=!1,this.onabort=null}return t.prototype.abort=function(){this.isAborted||(this.isAborted=!0,this.onabort&&this.onabort())},Object.defineProperty(t.prototype,"signal",{get:function(){return this},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"aborted",{get:function(){return this.isAborted},enumerable:!0,configurable:!0}),t}(),K=Object.assign||function(t){for(var e,n=1,o=arguments.length;n<o;n++)for(var r in e=arguments[n])Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t},X=function(t,e,n,o){return new(n||(n=Promise))((function(r,i){function s(t){try{a(o.next(t))}catch(t){i(t)}}function c(t){try{a(o.throw(t))}catch(t){i(t)}}function a(t){t.done?r(t.value):new n((function(e){e(t.value)})).then(s,c)}a((o=o.apply(t,e||[])).next())}))},G=function(t,e){var n,o,r,i,s={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(i){return function(c){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,o=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((r=(r=s.trys).length>0&&r[r.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){s.label=i[1];break}if(6===i[0]&&s.label<r[1]){s.label=r[1],r=i;break}if(r&&s.label<r[2]){s.label=r[2],s.ops.push(i);break}r[2]&&s.ops.pop(),s.trys.pop();continue}i=e.call(t,s)}catch(t){i=[6,t],o=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}},J=function(){function t(t,e,n,o,r,i){this.httpClient=t,this.accessTokenFactory=e,this.logger=n,this.pollAbort=new F,this.logMessageContent=o,this.withCredentials=r,this.headers=i,this.running=!1,this.onreceive=null,this.onclose=null}return Object.defineProperty(t.prototype,"pollAborted",{get:function(){return this.pollAbort.aborted},enumerable:!0,configurable:!0}),t.prototype.connect=function(t,n){return X(this,void 0,void 0,(function(){var o,r,i,c,a,l,u,h,p;return G(this,(function(f){switch(f.label){case 0:if(d.isRequired(t,"url"),d.isRequired(n,"transferFormat"),d.isIn(n,B,"transferFormat"),this.url=t,this.logger.log(e.Trace,"(LongPolling transport) Connecting."),n===B.Binary&&"undefined"!=typeof XMLHttpRequest&&"string"!=typeof(new XMLHttpRequest).responseType)throw new Error("Binary protocols over XmlHttpRequest not implementing advanced features are not supported.");return r=k(),i=r[0],c=r[1],a=K(((o={})[i]=c,o),this.headers),l={abortSignal:this.pollAbort.signal,headers:a,timeout:1e5,withCredentials:this.withCredentials},n===B.Binary&&(l.responseType="arraybuffer"),[4,this.getAccessToken()];case 1:return u=f.sent(),this.updateHeaderToken(l,u),h=t+"&_="+Date.now(),this.logger.log(e.Trace,"(LongPolling transport) polling: "+h+"."),[4,this.httpClient.get(h,l)];case 2:return 200!==(p=f.sent()).statusCode?(this.logger.log(e.Error,"(LongPolling transport) Unexpected response code: "+p.statusCode+"."),this.closeError=new s(p.statusText||"",p.statusCode),this.running=!1):this.running=!0,this.receiving=this.poll(this.url,l),[2]}}))}))},t.prototype.getAccessToken=function(){return X(this,void 0,void 0,(function(){return G(this,(function(t){switch(t.label){case 0:return this.accessTokenFactory?[4,this.accessTokenFactory()]:[3,2];case 1:return[2,t.sent()];case 2:return[2,null]}}))}))},t.prototype.updateHeaderToken=function(t,e){t.headers||(t.headers={}),e?t.headers.Authorization="Bearer "+e:t.headers.Authorization&&delete t.headers.Authorization},t.prototype.poll=function(t,n){return X(this,void 0,void 0,(function(){var o,r,i,a;return G(this,(function(l){switch(l.label){case 0:l.trys.push([0,,8,9]),l.label=1;case 1:return this.running?[4,this.getAccessToken()]:[3,7];case 2:o=l.sent(),this.updateHeaderToken(n,o),l.label=3;case 3:return l.trys.push([3,5,,6]),r=t+"&_="+Date.now(),this.logger.log(e.Trace,"(LongPolling transport) polling: "+r+"."),[4,this.httpClient.get(r,n)];case 4:return 204===(i=l.sent()).statusCode?(this.logger.log(e.Information,"(LongPolling transport) Poll terminated by server."),this.running=!1):200!==i.statusCode?(this.logger.log(e.Error,"(LongPolling transport) Unexpected response code: "+i.statusCode+"."),this.closeError=new s(i.statusText||"",i.statusCode),this.running=!1):i.content?(this.logger.log(e.Trace,"(LongPolling transport) data received. "+y(i.content,this.logMessageContent)+"."),this.onreceive&&this.onreceive(i.content)):this.logger.log(e.Trace,"(LongPolling transport) Poll timed out, reissuing."),[3,6];case 5:return a=l.sent(),this.running?a instanceof c?this.logger.log(e.Trace,"(LongPolling transport) Poll timed out, reissuing."):(this.closeError=a,this.running=!1):this.logger.log(e.Trace,"(LongPolling transport) Poll errored after shutdown: "+a.message),[3,6];case 6:return[3,1];case 7:return[3,9];case 8:return this.logger.log(e.Trace,"(LongPolling transport) Polling complete."),this.pollAborted||this.raiseOnClose(),[7];case 9:return[2]}}))}))},t.prototype.send=function(t){return X(this,void 0,void 0,(function(){return G(this,(function(e){return this.running?[2,b(this.logger,"LongPolling",this.httpClient,this.url,this.accessTokenFactory,t,this.logMessageContent,this.withCredentials,this.headers)]:[2,Promise.reject(new Error("Cannot send until the transport is connected"))]}))}))},t.prototype.stop=function(){return X(this,void 0,void 0,(function(){var t,n,o,r,i,s;return G(this,(function(c){switch(c.label){case 0:this.logger.log(e.Trace,"(LongPolling transport) Stopping polling."),this.running=!1,this.pollAbort.abort(),c.label=1;case 1:return c.trys.push([1,,5,6]),[4,this.receiving];case 2:return c.sent(),this.logger.log(e.Trace,"(LongPolling transport) sending DELETE request to "+this.url+"."),t={},n=k(),o=n[0],r=n[1],t[o]=r,i={headers:K({},t,this.headers),withCredentials:this.withCredentials},[4,this.getAccessToken()];case 3:return s=c.sent(),this.updateHeaderToken(i,s),[4,this.httpClient.delete(this.url,i)];case 4:return c.sent(),this.logger.log(e.Trace,"(LongPolling transport) DELETE request sent."),[3,6];case 5:return this.logger.log(e.Trace,"(LongPolling transport) Stop finished."),this.raiseOnClose(),[7];case 6:return[2]}}))}))},t.prototype.raiseOnClose=function(){if(this.onclose){var t="(LongPolling transport) Firing onclose event.";this.closeError&&(t+=" Error: "+this.closeError),this.logger.log(e.Trace,t),this.onclose(this.closeError)}},t}(),V=Object.assign||function(t){for(var e,n=1,o=arguments.length;n<o;n++)for(var r in e=arguments[n])Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t},Q=function(t,e,n,o){return new(n||(n=Promise))((function(r,i){function s(t){try{a(o.next(t))}catch(t){i(t)}}function c(t){try{a(o.throw(t))}catch(t){i(t)}}function a(t){t.done?r(t.value):new n((function(e){e(t.value)})).then(s,c)}a((o=o.apply(t,e||[])).next())}))},z=function(t,e){var n,o,r,i,s={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(i){return function(c){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,o=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((r=(r=s.trys).length>0&&r[r.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){s.label=i[1];break}if(6===i[0]&&s.label<r[1]){s.label=r[1],r=i;break}if(r&&s.label<r[2]){s.label=r[2],s.ops.push(i);break}r[2]&&s.ops.pop(),s.trys.pop();continue}i=e.call(t,s)}catch(t){i=[6,t],o=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}},$=function(){function t(t,e,n,o,r,i,s){this.httpClient=t,this.accessTokenFactory=e,this.logger=n,this.logMessageContent=o,this.withCredentials=i,this.eventSourceConstructor=r,this.headers=s,this.onreceive=null,this.onclose=null}return t.prototype.connect=function(t,n){return Q(this,void 0,void 0,(function(){var o,r=this;return z(this,(function(i){switch(i.label){case 0:return d.isRequired(t,"url"),d.isRequired(n,"transferFormat"),d.isIn(n,B,"transferFormat"),this.logger.log(e.Trace,"(SSE transport) Connecting."),this.url=t,this.accessTokenFactory?[4,this.accessTokenFactory()]:[3,2];case 1:(o=i.sent())&&(t+=(t.indexOf("?")<0?"?":"&")+"access_token="+encodeURIComponent(o)),i.label=2;case 2:return[2,new Promise((function(o,i){var s=!1;if(n===B.Text){var c;if(g.isBrowser||g.isWebWorker)c=new r.eventSourceConstructor(t,{withCredentials:r.withCredentials});else{var a=r.httpClient.getCookieString(t),l={};l.Cookie=a;var u=k(),h=u[0],p=u[1];l[h]=p,c=new r.eventSourceConstructor(t,{withCredentials:r.withCredentials,headers:V({},l,r.headers)})}try{c.onmessage=function(t){if(r.onreceive)try{r.logger.log(e.Trace,"(SSE transport) data received. "+y(t.data,r.logMessageContent)+"."),r.onreceive(t.data)}catch(t){return void r.close(t)}},c.onerror=function(t){var e=new Error(t.data||"Error occurred");s?r.close(e):i(e)},c.onopen=function(){r.logger.log(e.Information,"SSE connected to "+r.url),r.eventSource=c,s=!0,o()}}catch(t){return void i(t)}}else i(new Error("The Server-Sent Events transport only supports the 'Text' transfer format"))}))]}}))}))},t.prototype.send=function(t){return Q(this,void 0,void 0,(function(){return z(this,(function(e){return this.eventSource?[2,b(this.logger,"SSE",this.httpClient,this.url,this.accessTokenFactory,t,this.logMessageContent,this.withCredentials,this.headers)]:[2,Promise.reject(new Error("Cannot send until the transport is connected"))]}))}))},t.prototype.stop=function(){return this.close(),Promise.resolve()},t.prototype.close=function(t){this.eventSource&&(this.eventSource.close(),this.eventSource=void 0,this.onclose&&this.onclose(t))},t}(),Y=Object.assign||function(t){for(var e,n=1,o=arguments.length;n<o;n++)for(var r in e=arguments[n])Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t},Z=function(){function t(t,e,n,o,r,i){this.logger=n,this.accessTokenFactory=e,this.logMessageContent=o,this.webSocketConstructor=r,this.httpClient=t,this.onreceive=null,this.onclose=null,this.headers=i}return t.prototype.connect=function(t,n){return o=this,r=void 0,s=function(){var o,r=this;return function(t,e){var n,o,r,i,s={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(i){return function(c){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,o=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((r=(r=s.trys).length>0&&r[r.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){s.label=i[1];break}if(6===i[0]&&s.label<r[1]){s.label=r[1],r=i;break}if(r&&s.label<r[2]){s.label=r[2],s.ops.push(i);break}r[2]&&s.ops.pop(),s.trys.pop();continue}i=e.call(t,s)}catch(t){i=[6,t],o=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}}(this,(function(i){switch(i.label){case 0:return d.isRequired(t,"url"),d.isRequired(n,"transferFormat"),d.isIn(n,B,"transferFormat"),this.logger.log(e.Trace,"(WebSockets transport) Connecting."),this.accessTokenFactory?[4,this.accessTokenFactory()]:[3,2];case 1:(o=i.sent())&&(t+=(t.indexOf("?")<0?"?":"&")+"access_token="+encodeURIComponent(o)),i.label=2;case 2:return[2,new Promise((function(o,i){var s;t=t.replace(/^http/,"ws");var c=r.httpClient.getCookieString(t),a=!1;if(g.isNode){var l={},u=k(),h=u[0],p=u[1];l[h]=p,c&&(l.Cookie=""+c),s=new r.webSocketConstructor(t,void 0,{headers:Y({},l,r.headers)})}s||(s=new r.webSocketConstructor(t)),n===B.Binary&&(s.binaryType="arraybuffer"),s.onopen=function(n){r.logger.log(e.Information,"WebSocket connected to "+t+"."),r.webSocket=s,a=!0,o()},s.onerror=function(t){var e;e="undefined"!=typeof ErrorEvent&&t instanceof ErrorEvent?t.error:new Error("There was an error with the transport."),i(e)},s.onmessage=function(t){if(r.logger.log(e.Trace,"(WebSockets transport) data received. "+y(t.data,r.logMessageContent)+"."),r.onreceive)try{r.onreceive(t.data)}catch(t){return void r.close(t)}},s.onclose=function(t){var e;a?r.close(t):(e="undefined"!=typeof ErrorEvent&&t instanceof ErrorEvent?t.error:new Error("There was an error with the transport."),i(e))}}))]}}))},new((i=void 0)||(i=Promise))((function(t,e){function n(t){try{a(s.next(t))}catch(t){e(t)}}function c(t){try{a(s.throw(t))}catch(t){e(t)}}function a(e){e.done?t(e.value):new i((function(t){t(e.value)})).then(n,c)}a((s=s.apply(o,r||[])).next())}));var o,r,i,s},t.prototype.send=function(t){return this.webSocket&&this.webSocket.readyState===this.webSocketConstructor.OPEN?(this.logger.log(e.Trace,"(WebSockets transport) sending data. "+y(t,this.logMessageContent)+"."),this.webSocket.send(t),Promise.resolve()):Promise.reject("WebSocket is not in the OPEN state")},t.prototype.stop=function(){return this.webSocket&&this.close(void 0),Promise.resolve()},t.prototype.close=function(t){this.webSocket&&(this.webSocket.onclose=function(){},this.webSocket.onmessage=function(){},this.webSocket.onerror=function(){},this.webSocket.close(),this.webSocket=void 0),this.logger.log(e.Trace,"(WebSockets transport) socket closed."),this.onclose&&(!this.isCloseEvent(t)||!1!==t.wasClean&&1e3===t.code?t instanceof Error?this.onclose(t):this.onclose():this.onclose(new Error("WebSocket closed with status code: "+t.code+" ("+t.reason+").")))},t.prototype.isCloseEvent=function(t){return t&&"boolean"==typeof t.wasClean&&"number"==typeof t.code},t}(),tt=Object.assign||function(t){for(var e,n=1,o=arguments.length;n<o;n++)for(var r in e=arguments[n])Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t},et=function(t,e,n,o){return new(n||(n=Promise))((function(r,i){function s(t){try{a(o.next(t))}catch(t){i(t)}}function c(t){try{a(o.throw(t))}catch(t){i(t)}}function a(t){t.done?r(t.value):new n((function(e){e(t.value)})).then(s,c)}a((o=o.apply(t,e||[])).next())}))},nt=function(t,e){var n,o,r,i,s={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(i){return function(c){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,o=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((r=(r=s.trys).length>0&&r[r.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){s.label=i[1];break}if(6===i[0]&&s.label<r[1]){s.label=r[1],r=i;break}if(r&&s.label<r[2]){s.label=r[2],s.ops.push(i);break}r[2]&&s.ops.pop(),s.trys.pop();continue}i=e.call(t,s)}catch(t){i=[6,t],o=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}},ot=function(){function t(t,n){var o;if(void 0===n&&(n={}),this.stopPromiseResolver=function(){},this.features={},this.negotiateVersion=1,d.isRequired(t,"url"),this.logger=void 0===(o=n.logger)?new w(e.Information):null===o?p.instance:o.log?o:new w(o),this.baseUrl=this.resolveUrl(t),(n=n||{}).logMessageContent=void 0!==n.logMessageContent&&n.logMessageContent,"boolean"!=typeof n.withCredentials&&void 0!==n.withCredentials)throw new Error("withCredentials option was not a 'boolean' or 'undefined' value");n.withCredentials=void 0===n.withCredentials||n.withCredentials;var r=null,i=null;if(g.isNode){var s=require;r=s("ws"),i=s("eventsource")}g.isNode||"undefined"==typeof WebSocket||n.WebSocket?g.isNode&&!n.WebSocket&&r&&(n.WebSocket=r):n.WebSocket=WebSocket,g.isNode||"undefined"==typeof EventSource||n.EventSource?g.isNode&&!n.EventSource&&void 0!==i&&(n.EventSource=i):n.EventSource=EventSource,this.httpClient=n.httpClient||new j(this.logger),this.connectionState="Disconnected",this.connectionStarted=!1,this.options=n,this.onreceive=null,this.onclose=null}return t.prototype.start=function(t){return et(this,void 0,void 0,(function(){var n;return nt(this,(function(o){switch(o.label){case 0:return t=t||B.Binary,d.isIn(t,B,"transferFormat"),this.logger.log(e.Debug,"Starting connection with transfer format '"+B[t]+"'."),"Disconnected"!==this.connectionState?[2,Promise.reject(new Error("Cannot start an HttpConnection that is not in the 'Disconnected' state."))]:(this.connectionState="Connecting",this.startInternalPromise=this.startInternal(t),[4,this.startInternalPromise]);case 1:return o.sent(),"Disconnecting"!==this.connectionState?[3,3]:(n="Failed to start the HttpConnection before stop() was called.",this.logger.log(e.Error,n),[4,this.stopPromise]);case 2:return o.sent(),[2,Promise.reject(new Error(n))];case 3:if("Connected"!==this.connectionState)return n="HttpConnection.startInternal completed gracefully but didn't enter the connection into the connected state!",this.logger.log(e.Error,n),[2,Promise.reject(new Error(n))];o.label=4;case 4:return this.connectionStarted=!0,[2]}}))}))},t.prototype.send=function(t){return"Connected"!==this.connectionState?Promise.reject(new Error("Cannot send data if the connection is not in the 'Connected' State.")):(this.sendQueue||(this.sendQueue=new rt(this.transport)),this.sendQueue.send(t))},t.prototype.stop=function(t){return et(this,void 0,void 0,(function(){var n=this;return nt(this,(function(o){switch(o.label){case 0:return"Disconnected"===this.connectionState?(this.logger.log(e.Debug,"Call to HttpConnection.stop("+t+") ignored because the connection is already in the disconnected state."),[2,Promise.resolve()]):"Disconnecting"===this.connectionState?(this.logger.log(e.Debug,"Call to HttpConnection.stop("+t+") ignored because the connection is already in the disconnecting state."),[2,this.stopPromise]):(this.connectionState="Disconnecting",this.stopPromise=new Promise((function(t){n.stopPromiseResolver=t})),[4,this.stopInternal(t)]);case 1:return o.sent(),[4,this.stopPromise];case 2:return o.sent(),[2]}}))}))},t.prototype.stopInternal=function(t){return et(this,void 0,void 0,(function(){var n;return nt(this,(function(o){switch(o.label){case 0:this.stopError=t,o.label=1;case 1:return o.trys.push([1,3,,4]),[4,this.startInternalPromise];case 2:case 3:return o.sent(),[3,4];case 4:if(!this.transport)return[3,9];o.label=5;case 5:return o.trys.push([5,7,,8]),[4,this.transport.stop()];case 6:return o.sent(),[3,8];case 7:return n=o.sent(),this.logger.log(e.Error,"HttpConnection.transport.stop() threw error '"+n+"'."),this.stopConnection(),[3,8];case 8:return this.transport=void 0,[3,10];case 9:this.logger.log(e.Debug,"HttpConnection.transport is undefined in HttpConnection.stop() because start() failed."),o.label=10;case 10:return[2]}}))}))},t.prototype.startInternal=function(t){return et(this,void 0,void 0,(function(){var n,o,r,i,s,c;return nt(this,(function(a){switch(a.label){case 0:n=this.baseUrl,this.accessTokenFactory=this.options.accessTokenFactory,a.label=1;case 1:return a.trys.push([1,12,,13]),this.options.skipNegotiation?this.options.transport!==L.WebSockets?[3,3]:(this.transport=this.constructTransport(L.WebSockets),[4,this.startTransport(n,t)]):[3,5];case 2:return a.sent(),[3,4];case 3:throw new Error("Negotiation can only be skipped when using the WebSocket transport directly.");case 4:return[3,11];case 5:o=null,r=0,i=function(){var t;return nt(this,(function(e){switch(e.label){case 0:return[4,s.getNegotiationResponse(n)];case 1:if(o=e.sent(),"Disconnecting"===s.connectionState||"Disconnected"===s.connectionState)throw new Error("The connection was stopped during negotiation.");if(o.error)throw new Error(o.error);if(o.ProtocolVersion)throw new Error("Detected a connection attempt to an ASP.NET SignalR Server. This client only supports connecting to an ASP.NET Core SignalR Server. See https://aka.ms/signalr-core-differences for details.");return o.url&&(n=o.url),o.accessToken&&(t=o.accessToken,s.accessTokenFactory=function(){return t}),r++,[2]}}))},s=this,a.label=6;case 6:return[5,i()];case 7:a.sent(),a.label=8;case 8:if(o.url&&r<100)return[3,6];a.label=9;case 9:if(100===r&&o.url)throw new Error("Negotiate redirection limit exceeded.");return[4,this.createTransport(n,this.options.transport,o,t)];case 10:a.sent(),a.label=11;case 11:return this.transport instanceof J&&(this.features.inherentKeepAlive=!0),"Connecting"===this.connectionState&&(this.logger.log(e.Debug,"The HttpConnection connected successfully."),this.connectionState="Connected"),[3,13];case 12:return c=a.sent(),this.logger.log(e.Error,"Failed to start the connection: "+c),this.connectionState="Disconnected",this.transport=void 0,this.stopPromiseResolver(),[2,Promise.reject(c)];case 13:return[2]}}))}))},t.prototype.getNegotiationResponse=function(t){return et(this,void 0,void 0,(function(){var n,o,r,i,s,c,a,l,u;return nt(this,(function(h){switch(h.label){case 0:return n={},this.accessTokenFactory?[4,this.accessTokenFactory()]:[3,2];case 1:(o=h.sent())&&(n.Authorization="Bearer "+o),h.label=2;case 2:r=k(),i=r[0],s=r[1],n[i]=s,c=this.resolveNegotiateUrl(t),this.logger.log(e.Debug,"Sending negotiation request: "+c+"."),h.label=3;case 3:return h.trys.push([3,5,,6]),[4,this.httpClient.post(c,{content:"",headers:tt({},n,this.options.headers),withCredentials:this.options.withCredentials})];case 4:return 200!==(a=h.sent()).statusCode?[2,Promise.reject(new Error("Unexpected status code returned from negotiate '"+a.statusCode+"'"))]:((!(l=JSON.parse(a.content)).negotiateVersion||l.negotiateVersion<1)&&(l.connectionToken=l.connectionId),[2,l]);case 5:return u=h.sent(),this.logger.log(e.Error,"Failed to complete negotiation with the server: "+u),[2,Promise.reject(u)];case 6:return[2]}}))}))},t.prototype.createConnectUrl=function(t,e){return e?t+(-1===t.indexOf("?")?"?":"&")+"id="+e:t},t.prototype.createTransport=function(t,n,o,r){return et(this,void 0,void 0,(function(){var i,s,c,a,l,u,h,p,f,d,g;return nt(this,(function(y){switch(y.label){case 0:return i=this.createConnectUrl(t,o.connectionToken),this.isITransport(n)?(this.logger.log(e.Debug,"Connection was provided an instance of ITransport, using that directly."),this.transport=n,[4,this.startTransport(i,r)]):[3,2];case 1:return y.sent(),this.connectionId=o.connectionId,[2];case 2:s=[],c=o.availableTransports||[],a=o,l=0,u=c,y.label=3;case 3:return l<u.length?(h=u[l],(p=this.resolveTransportOrError(h,n,r))instanceof Error?(s.push(h.transport+" failed: "+p),[3,12]):[3,4]):[3,13];case 4:if(!this.isITransport(p))return[3,12];if(this.transport=p,a)return[3,9];y.label=5;case 5:return y.trys.push([5,7,,8]),[4,this.getNegotiationResponse(t)];case 6:return a=y.sent(),[3,8];case 7:return f=y.sent(),[2,Promise.reject(f)];case 8:i=this.createConnectUrl(t,a.connectionToken),y.label=9;case 9:return y.trys.push([9,11,,12]),[4,this.startTransport(i,r)];case 10:return y.sent(),this.connectionId=a.connectionId,[2];case 11:return d=y.sent(),this.logger.log(e.Error,"Failed to start the transport '"+h.transport+"': "+d),a=void 0,s.push(h.transport+" failed: "+d),"Connecting"!==this.connectionState?(g="Failed to select transport before stop() was called.",this.logger.log(e.Debug,g),[2,Promise.reject(new Error(g))]):[3,12];case 12:return l++,[3,3];case 13:return s.length>0?[2,Promise.reject(new Error("Unable to connect to the server with any of the available transports. "+s.join(" ")))]:[2,Promise.reject(new Error("None of the transports supported by the client are supported by the server."))]}}))}))},t.prototype.constructTransport=function(t){switch(t){case L.WebSockets:if(!this.options.WebSocket)throw new Error("'WebSocket' is not supported in your environment.");return new Z(this.httpClient,this.accessTokenFactory,this.logger,this.options.logMessageContent||!1,this.options.WebSocket,this.options.headers||{});case L.ServerSentEvents:if(!this.options.EventSource)throw new Error("'EventSource' is not supported in your environment.");return new $(this.httpClient,this.accessTokenFactory,this.logger,this.options.logMessageContent||!1,this.options.EventSource,this.options.withCredentials,this.options.headers||{});case L.LongPolling:return new J(this.httpClient,this.accessTokenFactory,this.logger,this.options.logMessageContent||!1,this.options.withCredentials,this.options.headers||{});default:throw new Error("Unknown transport: "+t+".")}},t.prototype.startTransport=function(t,e){var n=this;return this.transport.onreceive=this.onreceive,this.transport.onclose=function(t){return n.stopConnection(t)},this.transport.connect(t,e)},t.prototype.resolveTransportOrError=function(t,n,o){var r=L[t.transport];if(null==r)return this.logger.log(e.Debug,"Skipping transport '"+t.transport+"' because it is not supported by this client."),new Error("Skipping transport '"+t.transport+"' because it is not supported by this client.");if(!function(t,e){return!t||0!=(e&t)}(n,r))return this.logger.log(e.Debug,"Skipping transport '"+L[r]+"' because it was disabled by the client."),new Error("'"+L[r]+"' is disabled by the client.");if(!(t.transferFormats.map((function(t){return B[t]})).indexOf(o)>=0))return this.logger.log(e.Debug,"Skipping transport '"+L[r]+"' because it does not support the requested transfer format '"+B[o]+"'."),new Error("'"+L[r]+"' does not support "+B[o]+".");if(r===L.WebSockets&&!this.options.WebSocket||r===L.ServerSentEvents&&!this.options.EventSource)return this.logger.log(e.Debug,"Skipping transport '"+L[r]+"' because it is not supported in your environment.'"),new Error("'"+L[r]+"' is not supported in your environment.");this.logger.log(e.Debug,"Selecting transport '"+L[r]+"'.");try{return this.constructTransport(r)}catch(t){return t}},t.prototype.isITransport=function(t){return t&&"object"==typeof t&&"connect"in t},t.prototype.stopConnection=function(t){var n=this;if(this.logger.log(e.Debug,"HttpConnection.stopConnection("+t+") called while in state "+this.connectionState+"."),this.transport=void 0,t=this.stopError||t,this.stopError=void 0,"Disconnected"!==this.connectionState){if("Connecting"===this.connectionState)throw this.logger.log(e.Warning,"Call to HttpConnection.stopConnection("+t+") was ignored because the connection is still in the connecting state."),new Error("HttpConnection.stopConnection("+t+") was called while the connection is still in the connecting state.");if("Disconnecting"===this.connectionState&&this.stopPromiseResolver(),t?this.logger.log(e.Error,"Connection disconnected with error '"+t+"'."):this.logger.log(e.Information,"Connection disconnected."),this.sendQueue&&(this.sendQueue.stop().catch((function(t){n.logger.log(e.Error,"TransportSendQueue.stop() threw error '"+t+"'.")})),this.sendQueue=void 0),this.connectionId=void 0,this.connectionState="Disconnected",this.connectionStarted){this.connectionStarted=!1;try{this.onclose&&this.onclose(t)}catch(n){this.logger.log(e.Error,"HttpConnection.onclose("+t+") threw error '"+n+"'.")}}}else this.logger.log(e.Debug,"Call to HttpConnection.stopConnection("+t+") was ignored because the connection is already in the disconnected state.")},t.prototype.resolveUrl=function(t){if(0===t.lastIndexOf("https://",0)||0===t.lastIndexOf("http://",0))return t;if(!g.isBrowser||!window.document)throw new Error("Cannot resolve '"+t+"'.");var n=window.document.createElement("a");return n.href=t,this.logger.log(e.Information,"Normalizing '"+t+"' to '"+n.href+"'."),n.href},t.prototype.resolveNegotiateUrl=function(t){var e=t.indexOf("?"),n=t.substring(0,-1===e?t.length:e);return"/"!==n[n.length-1]&&(n+="/"),n+="negotiate",-1===(n+=-1===e?"":t.substring(e)).indexOf("negotiateVersion")&&(n+=-1===e?"?":"&",n+="negotiateVersion="+this.negotiateVersion),n},t}(),rt=function(){function t(t){this.transport=t,this.buffer=[],this.executing=!0,this.sendBufferedData=new it,this.transportResult=new it,this.sendLoopPromise=this.sendLoop()}return t.prototype.send=function(t){return this.bufferData(t),this.transportResult||(this.transportResult=new it),this.transportResult.promise},t.prototype.stop=function(){return this.executing=!1,this.sendBufferedData.resolve(),this.sendLoopPromise},t.prototype.bufferData=function(t){if(this.buffer.length&&typeof this.buffer[0]!=typeof t)throw new Error("Expected data to be of type "+typeof this.buffer+" but was of type "+typeof t);this.buffer.push(t),this.sendBufferedData.resolve()},t.prototype.sendLoop=function(){return et(this,void 0,void 0,(function(){var e,n,o;return nt(this,(function(r){switch(r.label){case 0:return[4,this.sendBufferedData.promise];case 1:if(r.sent(),!this.executing)return this.transportResult&&this.transportResult.reject("Connection stopped."),[3,6];this.sendBufferedData=new it,e=this.transportResult,this.transportResult=void 0,n="string"==typeof this.buffer[0]?this.buffer.join(""):t.concatBuffers(this.buffer),this.buffer.length=0,r.label=2;case 2:return r.trys.push([2,4,,5]),[4,this.transport.send(n)];case 3:return r.sent(),e.resolve(),[3,5];case 4:return o=r.sent(),e.reject(o),[3,5];case 5:return[3,0];case 6:return[2]}}))}))},t.concatBuffers=function(t){for(var e=t.map((function(t){return t.byteLength})).reduce((function(t,e){return t+e})),n=new Uint8Array(e),o=0,r=0,i=t;r<i.length;r++){var s=i[r];n.set(new Uint8Array(s),o),o+=s.byteLength}return n.buffer},t}(),it=function(){function t(){var t=this;this.promise=new Promise((function(e,n){var o;return o=[e,n],t.resolver=o[0],t.rejecter=o[1],o}))}return t.prototype.resolve=function(){this.resolver()},t.prototype.reject=function(t){this.rejecter(t)},t}(),st=function(){function t(){this.name="json",this.version=1,this.transferFormat=B.Text}return t.prototype.parseMessages=function(t,n){if("string"!=typeof t)throw new Error("Invalid input for JSON hub protocol. Expected a string.");if(!t)return[];null===n&&(n=p.instance);for(var o=[],r=0,i=R.parse(t);r<i.length;r++){var s=i[r],c=JSON.parse(s);if("number"!=typeof c.type)throw new Error("Invalid payload.");switch(c.type){case E.Invocation:this.isInvocationMessage(c);break;case E.StreamItem:this.isStreamItemMessage(c);break;case E.Completion:this.isCompletionMessage(c);break;case E.Ping:case E.Close:break;default:n.log(e.Information,"Unknown message type '"+c.type+"' ignored.");continue}o.push(c)}return o},t.prototype.writeMessage=function(t){return R.write(JSON.stringify(t))},t.prototype.isInvocationMessage=function(t){this.assertNotEmptyString(t.target,"Invalid payload for Invocation message."),void 0!==t.invocationId&&this.assertNotEmptyString(t.invocationId,"Invalid payload for Invocation message.")},t.prototype.isStreamItemMessage=function(t){if(this.assertNotEmptyString(t.invocationId,"Invalid payload for StreamItem message."),void 0===t.item)throw new Error("Invalid payload for StreamItem message.")},t.prototype.isCompletionMessage=function(t){if(t.result&&t.error)throw new Error("Invalid payload for Completion message.");!t.result&&t.error&&this.assertNotEmptyString(t.error,"Invalid payload for Completion message."),this.assertNotEmptyString(t.invocationId,"Invalid payload for Completion message.")},t.prototype.assertNotEmptyString=function(t,e){if("string"!=typeof t||""===t)throw new Error(e)},t}(),ct=Object.assign||function(t){for(var e,n=1,o=arguments.length;n<o;n++)for(var r in e=arguments[n])Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t},at={trace:e.Trace,debug:e.Debug,info:e.Information,information:e.Information,warn:e.Warning,warning:e.Warning,error:e.Error,critical:e.Critical,none:e.None},lt=function(){function t(){}return t.prototype.configureLogging=function(t){if(d.isRequired(t,"logging"),void 0!==t.log)this.logger=t;else if("string"==typeof t){var e=function(t){var e=at[t.toLowerCase()];if(void 0!==e)return e;throw new Error("Unknown log level: "+t)}(t);this.logger=new w(e)}else this.logger=new w(t);return this},t.prototype.withUrl=function(t,e){return d.isRequired(t,"url"),d.isNotEmpty(t,"url"),this.url=t,this.httpConnectionOptions=ct({},this.httpConnectionOptions,"object"==typeof e?e:{transport:e}),this},t.prototype.withHubProtocol=function(t){return d.isRequired(t,"protocol"),this.protocol=t,this},t.prototype.withAutomaticReconnect=function(t){if(this.reconnectPolicy)throw new Error("A reconnectPolicy has already been set.");return t?Array.isArray(t)?this.reconnectPolicy=new U(t):this.reconnectPolicy=t:this.reconnectPolicy=new U,this},t.prototype.build=function(){var t=this.httpConnectionOptions||{};if(void 0===t.logger&&(t.logger=this.logger),!this.url)throw new Error("The 'HubConnectionBuilder.withUrl' method must be called before building the connection.");var e=new ot(this.url,t);return W.create(e,this.logger||p.instance,this.protocol||new st,this.reconnectPolicy)},t}();const ut=document.getElementById("side-menu__create-room"),ht=document.getElementById("create-room-modal"),pt=document.getElementById("modal__body__close");ut&&ut.addEventListener("click",(function(){ht.classList.add("modal--active")})),pt&&pt.addEventListener("click",(function(){ht.classList.remove("modal--active")}));const ft=(new lt).withUrl("/notificationHub").build();ft.on("NotifyAll",(function(t){new(r())({position:"top-right"}).success(t.text)})),ft.start()})(),(()=>{"use strict";n.p})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,